ltm rule irule_clientcert_acl {
when RULE_INIT {
   # Set local debug log. 0=disable/1=enable.
   set static::debug "1"

   # Set data group list name
   set static::allowed_cert_list "dg_clientcert_acl"

   # syslog server - standard log
   set static::syslog_server "10.10.10.10:514"

   # syslog server - Debug logs
   set static::syslog_server_debug "10.10.10.11:514"
}

when CLIENTSSL_CLIENTCERT {

   # Initially set all variables
   set subject_c "none"
   set subject_pc "none"
   set subject_l "none"
   set subject_o "none"
   set subject_cn "none"
   set subject_serial "none"
   set subject_orgnr "none"
   set cert_status "none"
   set cert_present "0"
   set action "reject"

   # Check if client provided a certificate
   if {[SSL::cert 0] eq ""} {

      # Debug logging
      if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "No Client Certificate Received" }

      # Syslog
      log $static::syslog_server local0.info "virtualserver=[virtual name];client=[IP::remote_addr];server=[IP::local_addr];port=[TCP::local_port];remote_port=[TCP::remote_port];cert_present=$cert_present;cert_cn=$subject_cn;cert_serial=$subject_serial;cert_issuer=$cert_issuer;cert_status=$cert_status;action=$action"

      # Reset the connection - no certificate provided.
      reject

   } else {

      # Set cert_present
      set cert_present "1"

      # Set certificate serial number
      set cert [SSL::cert 0]
      set subject_serial [X509::serial_number $cert]

      # Ex: [X509::cert_fields $cert [SSL::verify_result] hash issuer serial sigalg subject subpubkey validity versionnum whole]
      set cert_issuer [X509::cert_fields $cert [SSL::verify_result] issuer]
      set cert_status [X509::cert_fields $cert [SSL::verify_result]]

      if { [SSL::verify_result]  } {
         # Return code from command != 0 - Verify failed - log and reject
         # Debug logging
         if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Certificate verify: Verify failed [SSL::verify_result] - $cert_status" }

         # Syslog
         log $static::syslog_server local0.info "virtualserver=[virtual name];client=[IP::remote_addr];server=[IP::local_addr];port=[TCP::local_port];remote_port=[TCP::remote_port];cert_present=$cert_present;cert_cn=$subject_cn;cert_serial=$subject_serial;cert_issuer=$cert_issuer;cert_status=$cert_status;action=$action"

         reject
      } else {
         # Return code from command == 0 - Verify OK - log and proceed
         # Debug logging
         if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Certificate verify: Verify OK [SSL::verify_result] - $cert_status" }
      }

      # Debug logging
      if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Recived client cert issued by $cert_issuer" }

      # Set certificate DN
      set subject_dn [X509::subject [SSL::cert 0]]

      # Split DN into list of key/value pairs
      set subject_dn_list [ split $subject_dn "," ]

      # Debug logging
      if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "subject_dn_list = $subject_dn_list" }

      # Loop through records in list - match key and store value in variable
      foreach record $subject_dn_list {
         set key [ string trim [ lindex [ split $record "=" ] 0 ] " "]
         set val [ lindex [ split $record "=" ] 1 ]
         switch [ string tolower $key ] {
            c {
               set subject_c $val
               if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Setting key/value from DN: $key=$val" }
               }
            postalcode {
               set subject_pc $val
               if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Setting key/value from DN: $key=$val" }
               }
            l {
               set subject_l $val
               if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Setting key/value from DN: $key=$val" }
               }
            o {
               set subject_o $val
               if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Setting key/value from DN: $key=$val" }
               }
            cn {
               set subject_cn $val
               if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Setting key/value from DN: $key=$val" }
               }
            serialnumber {
               set subject_orgnr $val
               if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Setting key/value from DN: $key=$val" }
               }
            }
         }

      # Debug logging
      if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Client Certificate Received: $subject_dn" }
      if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Client Certificate CN: $subject_cn" }
      if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Client Certificate Serial: $subject_serial" }

      # Lookup subject CN in datagroup list and locate corresponding serial number
      set dg_match [findclass $subject_cn $static::allowed_cert_list]
      set dg_serial [findclass $subject_cn $static::allowed_cert_list " "]

      # Debug logging
      if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Matching line from data group: $dg_serial" }
      if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Serial for CN in data group: $dg_serial" }

      # Check if there was a match for subject_cn in the data group list
      if { $dg_match ne "" } {

         # Does serial number from the certificate match allowed serial for CN?
         # Convert strings to lowercase and remove any : from the string before comparing.
         if { [ string trim [ string tolower "$subject_serial" ] ":" ] eq [ string trim [ string tolower "$dg_serial" ] ":" ] } {

            # Debug logging
            if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Data group match (case insensitive - strip :): Serial $subject_serial from cert matches $dg_serial" }
            if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Client Certificate Accepted: $subject_dn" }

            # Set action
            set action "accept"

            # Syslog
            log $static::syslog_server local0.info "virtualserver=[virtual name];client=[IP::remote_addr];server=[IP::local_addr];port=[TCP::local_port];remote_port=[TCP::remote_port];cert_present=$cert_present;cert_cn=$subject_cn;cert_serial=$subject_serial;cert_issuer=$cert_issuer;cert_status=$cert_status;action=$action"

            # Certificate Accepted Select pool here
            #pool $pool_name

         } else {

            # Debug logging
            if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "Data group match: Serial $subject_serial from cert does not match $dg_serial" }

            # Syslog
            log $static::syslog_server local0.info "virtualserver=[virtual name];client=[IP::remote_addr];server=[IP::local_addr];port=[TCP::local_port];remote_port=[TCP::remote_port];cert_present=$cert_present;cert_cn=$subject_cn;cert_serial=$subject_serial;cert_issuer=$cert_issuer;cert_status=$cert_status;action=$action"


            # Serial does not match allowed serial - reject connection
            reject

         }
      } else {

         # Debug logging
         if { "$static::debug" eq "1" } { log $static::syslog_server_debug local0.debug "No Matching Client Certificate Was Found Using: $subject_dn" }

         # Syslog
         log $static::syslog_server local0.info "virtualserver=[virtual name];client=[IP::remote_addr];server=[IP::local_addr];port=[TCP::local_port];remote_port=[TCP::remote_port];cert_present=$cert_present;cert_cn=$subject_cn;cert_serial=$subject_serial;cert_issuer=$cert_issuer;cert_status=$cert_status;action=$action"

         # CN does not match any of the allowed CNs from datagroup - reject connection
         reject

      }
   }
}
when HTTP_REQUEST {
   # For test purposes only. Please replace as suits your deployment or just comment out for default pool.
   HTTP::respond 200 content "200 - ok"
}
}
